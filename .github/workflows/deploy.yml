name: Deploy to AWS ECS(CD)

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2

  # Public ECR (us-east-1 고정)
  ECR_PUBLIC_REGION: us-east-1
  ECR_APP_REPO_URI: public.ecr.aws/j5n8s8m1/ikuzo
  ECR_NGINX_REPO_URI: public.ecr.aws/j5n8s8m1/ikuzo-nginx

  # ECS
  ECS_CLUSTER: ikuzo
  ECS_APP_SERVICE: ikuzo-app-service
  ECS_NGINX_SERVICE: ikuzo-nginx-service

jobs:
  docker:
    name: Build and Push Docker Images (app + nginx)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Configure AWS credentials for Public ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_KEY }}
          aws-region: ${{ env.ECR_PUBLIC_REGION }}

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region $ECR_PUBLIC_REGION \
            | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build Spring Boot jar
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar

      - name: Build, tag and push APP image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_APP_REPO_URI:latest -t $ECR_APP_REPO_URI:$IMAGE_TAG .
          docker push $ECR_APP_REPO_URI:latest
          docker push $ECR_APP_REPO_URI:$IMAGE_TAG

      # nginx Dockerfile 위치가 repo 루트/nginx/ 라고 가정. 경로 다르면 수정
      - name: Build, tag and push NGINX image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f nginx/Dockerfile -t $ECR_NGINX_REPO_URI:latest -t $ECR_NGINX_REPO_URI:$IMAGE_TAG nginx
          docker push $ECR_NGINX_REPO_URI:latest
          docker push $ECR_NGINX_REPO_URI:$IMAGE_TAG

  deploy:
    name: Deploy to ECS
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials for ECS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 태스크 정의 파일들을 로컬에서 읽어서, 각각의 image를 sha 태그로 치환
      - name: Prepare final task definitions (set app and nginx images)
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          APP_IMG="$ECR_APP_REPO_URI:$IMAGE_TAG"
          NGINX_IMG="$ECR_NGINX_REPO_URI:$IMAGE_TAG"

          # App task definition 업데이트
          jq --arg app "$APP_IMG" '
            del(
              .taskDefinitionArn,
              .revision,
              .status,
              .requiresAttributes,
              .compatibilities,
              .registeredAt,
              .registeredBy
            )
            | .containerDefinitions[0].image = $app
          ' task-definition-app.json > final-app-task-def.json

          # Nginx task definition 업데이트
          jq --arg ngx "$NGINX_IMG" '
            del(
              .taskDefinitionArn,
              .revision,
              .status,
              .requiresAttributes,
              .compatibilities,
              .registeredAt,
              .registeredBy
            )
            | .containerDefinitions[0].image = $ngx
          ' task-definition-nginx.json > final-nginx-task-def.json

      - name: Register new task definitions
        id: register-tasks
        run: |
          # App task definition 등록
          APP_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://final-app-task-def.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "app_task_def_arn=$APP_ARN" >> $GITHUB_OUTPUT
          
          # Nginx task definition 등록
          NGINX_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://final-nginx-task-def.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "nginx_task_def_arn=$NGINX_ARN" >> $GITHUB_OUTPUT

      - name: Stop existing ECS services temporarily
        run: |
          # App 서비스 중지
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_APP_SERVICE \
            --desired-count 0 || echo "App service not found or already stopped"
          
          # Nginx 서비스 중지
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_NGINX_SERVICE \
            --desired-count 0 || echo "Nginx service not found or already stopped"
          
          # 서비스들이 안정화될 때까지 대기
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_APP_SERVICE $ECS_NGINX_SERVICE || echo "Services already stable"

      - name: Deploy new task definitions to ECS services
        run: |
          # App 서비스 배포 (2개 인스턴스)
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_APP_SERVICE \
            --task-definition ${{ steps.register-tasks.outputs.app_task_def_arn }} \
            --desired-count 2
          
          # Nginx 서비스 배포 (1개 인스턴스)
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_NGINX_SERVICE \
            --task-definition ${{ steps.register-tasks.outputs.nginx_task_def_arn }} \
            --desired-count 1
          
          # 서비스들이 안정화될 때까지 대기
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_APP_SERVICE $ECS_NGINX_SERVICE

      - name: Deployment success
        if: success()
        run: |
          echo "::notice::✅ Deployed!"
          echo "App Task Definition: ${{ steps.register-tasks.outputs.app_task_def_arn }}"
          echo "Nginx Task Definition: ${{ steps.register-tasks.outputs.nginx_task_def_arn }}"
          echo "App Service: $ECS_APP_SERVICE (2 instances)"
          echo "Nginx Service: $ECS_NGINX_SERVICE (1 instance)"

      - name: Deployment failed
        if: failure()
        run: |
          echo "::error::❌ Deployment failed. Check ECS events & CloudWatch logs."
          echo "Check services: $ECS_APP_SERVICE, $ECS_NGINX_SERVICE"

      # latest 외 태그 정리
      - name: Clean up old ECR Public images (keep only 'latest')
        if: success()
        env:
          REPO_APP: ${{ env.ECR_APP_REPO_URI }}
          REPO_NGX: ${{ env.ECR_NGINX_REPO_URI }}
          REGION: ${{ env.ECR_PUBLIC_REGION }}
        run: |
          clean_repo () {
            local REPO=$1
            local REGION=$2
            local REPO_NAME=$(echo $REPO | awk -F'/' '{print $NF}')

            LATEST_DIGEST=$(aws ecr-public describe-images --region $REGION \
              --repository-name $REPO_NAME \
              --query 'imageDetails[?imageTags != null && contains(imageTags, `latest`)].[imageDigest]' \
              --output text | head -n 1)

            [ -z "$LATEST_DIGEST" ] && return 0

            ALL=$(aws ecr-public describe-images --region $REGION \
              --repository-name $REPO_NAME \
              --query 'imageDetails[*].[imageDigest,imageTags[]]' --output json)

            TO_DELETE=$(echo "$ALL" | jq -r --arg L "$LATEST_DIGEST" \
              '[.[] | select(.[0] != $L) | .[0]] | unique | .[]')

            if [ -n "$TO_DELETE" ]; then
              echo "$TO_DELETE" | xargs -I {} aws ecr-public batch-delete-image \
                --region $REGION --repository-name $REPO_NAME \
                --image-ids imageDigest={}
            fi
          }

          clean_repo "$REPO_APP" "$REGION"
          clean_repo "$REPO_NGX" "$REGION"
